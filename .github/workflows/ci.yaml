name: CI

on: push

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        name:
          - ubuntu-18.04-gcc-9
          - ubuntu-18.04-clang-9
          - windows-2019-cl
        include:
          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-clang-9
            os: ubuntu-18.04
            compiler: clang
            version: "9"

          - name: ubuntu-18.04-clang-10-bazel
            os: ubuntu-18.04
            compiler: clang
            version: "10"
            bazel: true

          - name: windows-2019-cl
            os: windows-2019
            cmake-args: -A x64

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          python3 -m pip install pip --upgrade
          python3 -m pip install cmake==3.14.4 ninja==1.9.0.post1 --upgrade

          sudo apt update
          sudo apt-get install -y libxrandr-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

          if [ "${{ matrix.bazel }}" = "true" ]; then
            wget -LO bazelisk "https://github.com/bazelbuild/bazelisk/releases/download/v1.7.4/bazelisk-linux-amd64"
            chmod +x bazelisk
          fi

      - name: Install (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install ninja --upgrade
          python -m pip install cmake --upgrade

      - name: Build and test (cmake)
        if: ${{ ! matrix.bazel }}
        run: |
          ninja --version
          cmake --version
          cmake -S . -B build ${{ matrix.cmake-args }}
          cmake --build build
          (cd build && ctest)

      - name: Build and test (bazel)
        if: matrix.bazel
        run: |
          ./bazelisk build --config gnulike //...
